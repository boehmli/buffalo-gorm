package actions

import (

  "github.com/pkg/errors"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/crolly/buffalo-gorm/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Test)
// DB Table: Plural (tests)
// Resource: Plural (AdminTests)
// Path: Plural (/admin/tests)
// View Template Folder: Plural (/templates/admin/tests/)

// AdminTestsResource is the resource for the Test model
type AdminTestsResource struct{
  buffalo.Resource
}

// List gets all Tests. This function is mapped to the path
// GET /admin/tests
func (v AdminTestsResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  tests := &models.Tests{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Tests from the DB
  if err := q.All(tests); err != nil {
    return errors.WithStack(err)
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(200, r.Auto(c, tests))
}

// Show gets the data for one Test. This function is mapped to
// the path GET /admin/tests/{admin_test_id}
func (v AdminTestsResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Allocate an empty Test
  test := &models.Test{}

  // To find the Test the parameter admin_test_id is used.
  if err := tx.Find(test, c.Param("admin_test_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, test))
}

// New renders the form for creating a new Test.
// This function is mapped to the path GET /admin/tests/new
func (v AdminTestsResource) New(c buffalo.Context) error {
  return c.Render(200, r.Auto(c, &models.Test{}))
}

// Create adds a Test to the DB. This function is mapped to the
// path POST /admin/tests
func (v AdminTestsResource) Create(c buffalo.Context) error {
  // Allocate an empty Test
  test := &models.Test{}

  // Bind test to the html form elements
  if err := c.Bind(test); err != nil {
    return errors.WithStack(err)
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(test)
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, test))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", "Test was created successfully")

  // and redirect to the admin/tests index page
  return c.Render(201, r.Auto(c, test))
}

// Edit renders a edit form for a Test. This function is
// mapped to the path GET /admin/tests/{admin_test_id}/edit
func (v AdminTestsResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Allocate an empty Test
  test := &models.Test{}

  if err := tx.Find(test, c.Param("admin_test_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, test))
}

// Update changes a Test in the DB. This function is mapped to
// the path PUT /admin/tests/{admin_test_id}
func (v AdminTestsResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Allocate an empty Test
  test := &models.Test{}

  if err := tx.Find(test, c.Param("admin_test_id")); err != nil {
    return c.Error(404, err)
  }

  // Bind Test to the html form elements
  if err := c.Bind(test); err != nil {
    return errors.WithStack(err)
  }

  verrs, err := tx.ValidateAndUpdate(test)
  if err != nil {
    return errors.WithStack(err)
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, test))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", "Test was updated successfully")

  // and redirect to the admin/tests index page
  return c.Render(200, r.Auto(c, test))
}

// Destroy deletes a Test from the DB. This function is mapped
// to the path DELETE /admin/tests/{admin_test_id}
func (v AdminTestsResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return errors.WithStack(errors.New("no transaction found"))
  }

  // Allocate an empty Test
  test := &models.Test{}

  // To find the Test the parameter admin_test_id is used.
  if err := tx.Find(test, c.Param("admin_test_id")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy(test); err != nil {
    return errors.WithStack(err)
  }

  // If there are no errors set a flash message
  c.Flash().Add("success", "Test was destroyed successfully")

  // Redirect to the admin/tests index page
  return c.Render(200, r.Auto(c, test))
}
